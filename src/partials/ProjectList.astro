---
import projects from '@/data/projects';
import Image from '@/partials/Image.astro';

type Props = {
  projects: {
    alt: string,
    description: string,
    href: string
    title: string,
    src: string, 
  }[];
};

const { projects: Props } = Astro.props;
---

<section id="work" class="flex flex-col pt-24 pb-32 md:pb-48">
  <h2 class="fadeUpIn flex justify-between pb-4 text-lg">
    Recent Work<p class="mr-[-2px]">â†“</p>
  </h2>
  <div class="flex flex-col gap-32">
    {projects.map(
      ({ alt, title: pTitle, src, description: pDescription, href }, index: number) => (
        <a
          href={href}
          title={pTitle}
          class={`${ index === 0 ? 'fadeUpIn' : 'fadeUpInOnScroll'} customCursor flex flex-col gap-2`}
        >
          <div class="h-85 overflow-hidden rounded-xl">
            <Image
              src={src}
              alt={alt}
              className="transition-transform duration-700 hover:scale-110 object-cover object-center h-full"
            />
          </div>
          <div class="mt-2 flex text-lg">
            <h3 class="w-1/3">{pTitle}</h3>
            <p class="w-1/2">{pDescription}</p>
          </div>
        </a>
      )
    )}
  </div>

  <!-- todo: move into it's own component -->
  <div id="cursor" class=""><div class="cursor-content"><span>+</span></div></div>
</section>

<style>
  #cursor {
    position: fixed;
    top: 0;
    left: 0;
    z-index: 2;
    mix-blend-mode: difference;
    pointer-events: none;
 }
 #cursor.active .cursor-content {
  transform: scale(1);
 }
 #cursor.clicked .cursor-content  {
  transform: scale(1.3);
 }
 .cursor-content {
    width: 150px;
    height: 150px;
    background: #278fc6;
    filter: invert(1);
    border-radius: 50%;
    transform: scale(0);
    font-size: 100px;
    font-weight: 100;
    justify-content: center;
    align-items: center;
    display: flex;
    transition: transform 0.5s cubic-bezier(0.645, 0.045, 0.355, 1);
 }
 .cursor-content span {
  margin-top: -6px; /* to vertically align, couldn't figure out a better way */
 }
</style>

<script>
  const animationDuration = 400;
  const projects = document.querySelectorAll('.customCursor');
  const cursor = document.getElementById('cursor');

  const cursorSize = cursor?.offsetWidth ?? 0;

  let cursorX = 0;
  let cursorY = 0;

  let animationStartTime: number | null = null;
  let isHovering = false;
  let startScaleAnimation = false;

  const setMousePosition = (e: MouseEvent) => { 
    cursorX = e.clientX - (cursorSize/2);
    cursorY = e.clientY - (cursorSize/2);
  }

  const animateCursor = (now: number) => {
    if (startScaleAnimation) {
      animationStartTime = now;
      startScaleAnimation = false;
    }

    // fixme: this stinks, hard to know what's going on here
    const timeElapsed = now - animationStartTime!;
    const isScaling = timeElapsed <= animationDuration;

    cursor!.style.transform = `translate(${cursorX}px,${cursorY}px) translate3D(0,0,0)`;
    
    if (isHovering || isScaling) {
      requestAnimationFrame(animateCursor);
    }
  };

  const startAnimation = (e:Event) => {
    startScaleAnimation = true;
    isHovering = true;
    cursor?.classList.add('active');
    // console.log('mouseenter')

    setMousePosition(e as MouseEvent);

    requestAnimationFrame(animateCursor);
  }

  const endAnimation = () => {
    startScaleAnimation = true;
    isHovering = false;
    cursor?.classList.remove('active');

    // fixme: not sure why this is firing a lot after mouseenter
    // console.log('mouseleave')
  }

  // todo: better name these methods
  const onPress = () => {
    cursor?.classList.add('clicked');
  }

  const onRelease = () => {
    setTimeout(() => {
      cursor?.classList.remove('clicked');
    }, 200);
  }

  document.body.addEventListener('mousemove', setMousePosition);

  projects.forEach((project) => {
    project.addEventListener('mouseenter', startAnimation);
    // todo: you could register these on enter, and remove on exit... 
    project.addEventListener('mouseleave', endAnimation);
    project.addEventListener('mousedown', onPress);
    project.addEventListener('mouseup', onRelease);
  });
</script>